#!/usr/bin/python3

class bcolors:
    OK = '\033[92m' #GREEN
    WARNING = '\033[34m' #BLUE
    FAIL = '\033[91m' #RED
    INPUT = '\033[93m' #YELLOW
    RESET = '\033[0m' #RESET COLOR

resume = open("Check/resume", "r")
tabres = resume.readlines()
resume.close()

norme = open("Check/norme", "r")
tabnor = norme.readlines()
norme.close()

push_that = open("Check/push_that", "w")

count = 0

if (tabres[0] == "Find\n") :
    print(bcolors.WARNING + "---------------------------------------------------------------\n" + bcolors.RESET)
    print(bcolors.OK + "The program compiles correctly V\n" + bcolors.RESET)
    print(bcolors.WARNING + "---------------------------------------------------------------\n" + bcolors.RESET)
if (tabres[0] == "No_find\n") :
    print(bcolors.FAIL + "The program does not compile X\n" + bcolors.RESET)
    print(bcolors.WARNING + "---------------------------------------------------------------\n" + bcolors.RESET)
    count = 1
if (tabres[1] == "Find\n") :
    print(bcolors.OK + "The tests compile correctly V\n" + bcolors.RESET)
    print(bcolors.WARNING + "---------------------------------------------------------------\n" + bcolors.RESET)
if (tabres[1] == "No_find\n") :
    print(bcolors.FAIL + "Tests don't compile X\n" + bcolors.RESET)
    print(bcolors.WARNING + "---------------------------------------------------------------\n" + bcolors.RESET)
    count = 1
if (tabres[2][0] == "F") :
    print(bcolors.FAIL + "File unwanted find in the folder X\n" + bcolors.RESET)
    print(bcolors.WARNING + "---------------------------------------------------------------\n" + bcolors.RESET)
    count = 1
if (tabres[2] == "No_unwanted_file_find\n") :
    print(bcolors.OK + "No unwanted file find in the folder V\n" + bcolors.RESET)
    print(bcolors.WARNING + "---------------------------------------------------------------\n" + bcolors.RESET)

print(tabnor[len(tabnor) - 3])
print(bcolors.WARNING + "---------------------------------------------------------------\n" + bcolors.RESET)

if (count == 0) :
    push = input(bcolors.INPUT + "Do you want push on Github ? y/n" + bcolors.RESET)
    push_that.write(push)
    push_that.write('\n')
    if (push == 'y') :
        commit = input(bcolors.INPUT + "What commit do you want ? " + bcolors.RESET)
        push_that.write(commit)

push_that.close()